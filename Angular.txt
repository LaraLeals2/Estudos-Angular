............................................................
Etapa 1: Fundamentos de Angular

1. Introdução ao Angular
-----O que é Angular?--------

Angular é um framework front-end de código aberto baseado em TypeScript,
usado para construir aplicações web dinâmicas e single-page applications (SPAs).


^^^^^ História e evolução do Angular ^^^^^ 

AngularJS foi lançado em 2010.
Angular 2 foi um reescrito completo, lançado em 2016.
Desde então, Angular segue um ciclo de lançamentos semestrais.


^^^^^ Angular vs. AngularJS ^^^^^ 

AngularJS é a versão original, baseada em JavaScript.
Angular (ou Angular 2+) é a versão moderna, baseada em TypeScript,
com melhorias significativas em performance, modularidade e escalabilidade.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2. Configuração do Ambiente

^^^^^ Instalação do Node.js e npm ^^^^^ 

Baixe e instale o Node.js do site oficial: >>>>   nodejs.org
O npm (Node Package Manager) é instalado junto com o Node.js.


^^^^^ Instalando o Angular CLI ^^^^^ 

No terminal: >>>> npm install -g @angular/cli


^^^^^ Criando o primeiro projeto Angular ^^^^^ 

ng new meu-projeto
cd meu-projeto
ng serve


^^^^^ Estrutura de diretórios do Angular ^^^^^ 

>>>>  src: Código-fonte da aplicação.
>>>>  app: Contém componentes, serviços e outros módulos.
>>>>  assets: Arquivos estáticos como imagens e fontes.
>>>>  environments: Configurações de ambiente (desenvolvimento, produção).
>>>>  angular.json: Configurações do Angular CLI.
>>>>  package.json: Dependências do projeto e scripts npm.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

3. Conceitos Básicos

^^^^^ Componentes ^^^^^ 

Criação e utilização de componentes

No terminal: >>>> ng generate component nome-do-componente

>>>>  app.component.ts: Lógica do componente.
>>>>  app.component.html: Template do componente.
>>>>  app.component.css: Estilos do componente.



^^^^^ Ciclo de vida dos componentes ^^^^^ 

>>>>  ngOnInit: Chamado após a criação do componente.
>>>>  ngOnChanges: Chamado quando as propriedades de input mudam.
>>>>  ngOnDestroy: Chamado antes de destruir o componente.


^^^^^ Templates ^^^^^ 

Interpolação e bindings

Interpolação: {{ variavel }}
Property binding: [property]="value"
Event binding: (event)="method()"


^^^^^ Diretivas estruturais ^^^^^ 

>>>>  *ngIf: Renderiza um elemento com base em uma condição.
>>>>  *ngFor: Itera sobre uma coleção.


^^^^^ Serviços e Injeção de Dependência (DI) ^^^^^ 

Criando e utilizando serviços

>>>>  ng generate service nome-do-servico
>>>>  Definidos com a anotação @Injectable.


^^^^^ Injeção de dependência ^^^^^ 

Serviços são injetados no construtor de componentes ou outros serviços.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

4. Módulos

------O que são módulos?-------

Conjuntos de componentes, serviços e outras partes relacionadas, 
encapsuladas em um contexto.

^^^^^ Módulo raiz (AppModule) ^^^^^ 

>>>>  Define o ponto de entrada da aplicação.

^^^^^ Módulos de recursos (Feature Modules) ^^^^^ 

>>>>  Módulos adicionais para funcionalidades específicas, melhorando a modularidade.

....................................................................................

Etapa 2: Desenvolvimento Intermediário

5. Roteamento e Navegação

^^^^^ Configurando rotas ^^^^^ 

Definição das rotas no arquivo app-routing.module.ts.

const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'about', component: AboutComponent },
  // ... outras rotas
];

^^^^^ Navegação entre páginas ^^^^^ 

Usando RouterLink no template.

<a routerLink="/about">About</a>

^^^^^ Parâmetros de rota ^^^^^ 

Definindo parâmetros:

{ path: 'user/:id', component: UserComponent }


Acessando parâmetros no componente:

this.route.params.subscribe(params => {
  this.id = params['id'];
});


Guardas de rota (Route Guards)

Criação de guardas para proteger rotas:

>>>> ng generate guard auth


Implementação: 

canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): 
boolean {
  return this.authService.isLoggedIn();
}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

6. Formulários

^^^^^ Formulários Template-driven ^^^^^

Template:

<form #form="ngForm" (ngSubmit)="onSubmit(form)">
  <input name="name" ngModel required>
</form>

Componente:

onSubmit(form: NgForm) {
  console.log(form.value);
}


^^^^^ Formulários Reactive ^^^^^ 

Template:

<form [formGroup]="form" (ngSubmit)="onSubmit()">
  <input formControlName="name" required>
</form>

Componente:

this.form = this.fb.group({
  name: ['', Validators.required]
});
onSubmit() {
  console.log(this.form.value);
}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

7. HTTP e APIs

Introdução ao HttpClient

^^^^^ Importação do módulo HttpClientModule no AppModule. ^^^^^ 

Realizando requisições HTTP

GET:

this.http.get('api/url').subscribe(data => console.log(data));



POST:

this.http.get('api/url').pipe(
  catchError(error => {
    console.error('Error:', error);
    return throwError(error);
  })
).subscribe();


Tratamento de erros 

this.http.get('api/url').pipe(
  catchError(error => {
    console.error('Error:', error);
    return throwError(error);
  })
).subscribe();

Interceptores

>>>> ng generate interceptor auth


^^^^^ Implementação: ^^^^^ 

intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
  const clonedRequest = req.clone
  ({ headers: req.headers.set('Authorization', 'Bearer token') });
  return next.handle(clonedRequest);
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

8.Estilos e Animações

Estilização de componentes

Estilos no componente:

.meu-componente {
  background-color: blue;
}

^^^^^^ Angular Material ^^^^^

Instalação:

>>>> ng add @angular/material

Importação de módulos:

import { MatButtonModule } from '@angular/material/button';

^^^^ Animações básicas ^^^^

import { trigger, state, style, transition, animate } from '@angular/animations';

animations: [
  trigger('openClose', [
    state('open', style({
      height: '200px',
      opacity: 1,
    })),
    state('closed', style({
      height: '100px',
      opacity: 0.5,
    })),
    transition('open => closed', [
      animate('0.5s')
    ]),
    transition('closed => open', [
      animate('0.5s')
    ]),
  ]),
]

......................................................................

Etapa 3: Técnicas Avançadas

9. State Management

^^^^ Serviços de Estado ^^^^ 

Uso de serviços para gerenciar o estado da aplicação.

Introdução ao NgRx (Redux para Angular)

Instalação:

>>>> ng add @ngrx/store

Configuração do Store:

StoreModule.forRoot({ state: stateReducer });


^^^^ Ações, Redutores, e Selectors ^^^^ 

Definição de ações:

export const loadItems = createAction('[Items Page] Load Items');

Criação de redutores:

const initialState = { items: [] };
const _itemsReducer = createReducer(initialState, on(loadItems, state => 
({ ...state, loading: true })));

Uso de selectors:

const selectItems = (state: AppState) => state.items;

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

10. Testes
Testes unitários com Jasmine e Karma

Testes de componentes:

it('should create the app', () => {
  const fixture = TestBed.createComponent(AppComponent);
  const app = fixture.componentInstance;
  expect(app).toBeTruthy();
});


^^^^^ Testes end-to-end (E2E) com Protractor ^^^^^ 

Estrutura de testes E2E:

it('should display welcome message', () => {
  browser.get(browser.baseUrl);
  expect(element(by.css('app-root h1')).getText()).toEqual('Welcome to MyApp!');
});

^^^^ Testando componentes, serviços e pipes ^^^^^ 

Testando serviços:

it('should fetch data', inject([DataService], (service: DataService) => {
  service.getData().subscribe(data => {
    expect(data).toBeDefined();
  });
}));

Testando pipes:

it('should transform value', () => {
  const pipe = new MyPipe();
  expect(pipe.transform('input')).toEqual('expectedOutput');
});

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

11. Performance e Otimização

^^^^ Change Detection Strategy ^^^^ 

Usando ChangeDetectionStrategy.OnPush para melhorar a performance: 

@Component({
  selector: 'app-my-component',
  templateUrl: './my-component.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class MyComponent {}


^^^^ Lazy Loading ^^^^

Configuração de rotas com lazy loading:

const routes: Routes = [
  { path: 'feature', loadChildren: () => import('./feature/feature.module').then(m => m.FeatureModule) }
];


^^^^^ Pré-carregamento de módulos ^^^^^ 

Configurando pré-carregamento:

RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })

^^^^ Melhorias de performance no Angular ^^^^

>>>> Evitar mudanças desnecessárias no DOM.

>>>> Utilizar trackBy em ngFor para otimizar a renderização.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

12. Internacionalização (i18n)

Configurando o Angular para suporte a múltiplos idiomas

Adicionar @angular/localize
>>>>ng add @angular/localize


^^^^ Traduções e uso de mensagens ^^^^ 

Marcar strings para tradução:

<h1 i18n="site header|An introduction header for this sample">Hello world</h1>


^^^^ Estratégias de carregamento de idioma ^^^^ 

Configurar o angular.json para incluir arquivos de tradução:

"i18n": {
  "sourceLocale": "en-US",
  "locales": {
    "fr": "src/locale/messages.fr.xlf"
  }
}

...............................................................

Etapa 4: Práticas e Projetos

13. Projeto Pessoal

Desenvolver um projeto completo usando Angular, aplicando os conceitos aprendidos
Escolher um projeto que seja desafiador e abrangente.
Planejar a arquitetura e modularidade do projeto.
Implementar, testar e otimizar a aplicação.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

14. Boas Práticas e Padrões de Código

^^^^ Organização de código ^^^^

Seguir uma estrutura de diretórios clara e consistente.
Agrupar componentes, serviços e módulos de maneira lógica.


^^^^ Naming conventions ^^^^ 

Utilizar convenções de nomenclatura consistentes para arquivos, classes e variáveis.

^^^^ Padrões de design ^^^^

Aplicar princípios SOLID.

Utilizar padrões de design como Singleton, Factory e Observer quando apropriado.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

15. Manutenção e Atualizações

Atualizando o Angular CLI e Angular

Manter o Angular CLI atualizado:
>>>> ng update @angular/cli @angular/core


 ^^^^ Compatibilidade de versões ^^^^ 

Verificar notas de lançamento e guias de migração ao atualizar.

Planejamento para manutenção de longo prazo

Documentar o código e a arquitetura.

Estabelecer práticas de revisão de código e controle de qualidade.


^^^^^ Recursos Adicionais ^^^^^

Documentação oficial do Angular

Angular Documentation

Cursos online

Pluralsight, Udemy, Coursera
Comunidades e fóruns

Stack Overflow, Angular Reddit
Repositórios e exemplos no GitHub

Examinar e estudar projetos open-source no GitHub.





